{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\FRANKLYN\\\\Videos\\\\FrankDating\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './PaginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.hubUrl = environment.hubUrl;\n    this.messageThreadSource = new BehaviorSubject([]);\n    this.messageThread$ = this.messageThreadSource.asObservable();\n  }\n\n  createHubConnection(user, otherUsername) {\n    this.hubConnection = new HubConnectionBuilder().withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n      accessTokenFactory: () => user.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => console.log(error));\n    this.hubConnection.on('ReceiveMessageThread', messages => {\n      this.messageThreadSource.next(messages);\n    });\n    this.hubConnection.on('NewMessage', message => {\n      this.messageThread$.pipe(take(1)).subscribe(messages => {\n        this.messageThreadSource.next([...messages, message]);\n      });\n    });\n    this.hubConnection.on('UpdatedGroup', (group, Group) => {\n      if (group.connections.some(x => x.us)) ;\n    });\n  }\n\n  stopHubConnection() {\n    if (this.hubConnection) {\n      this.hubConnection.stop();\n    }\n  }\n\n  getMessages(pageNumber, pageSize, container) {\n    let params = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('container', container);\n    return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n  }\n\n  getMessageThread(username) {\n    return this.http.get(this.baseUrl + 'messages/thread/' + username);\n  }\n\n  sendMessage(username, content) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.hubConnection.invoke('SendMessage', {\n        recepientUsername: username,\n        content\n      }).catch(error => console.log(error));\n    })();\n  }\n\n  deleteMessage(id) {\n    return this.http.delete(this.baseUrl + 'messages/' + id);\n  }\n\n}\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/FRANKLYN/Videos/FrankDating/client/src/app/_services/message.service.ts"],"names":["HubConnectionBuilder","BehaviorSubject","take","environment","getPaginatedResult","getPaginationHeaders","i0","i1","MessageService","constructor","http","baseUrl","apiUrl","hubUrl","messageThreadSource","messageThread$","asObservable","createHubConnection","user","otherUsername","hubConnection","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","catch","error","console","log","on","messages","next","message","pipe","subscribe","group","Group","connections","some","x","us","stopHubConnection","stop","getMessages","pageNumber","pageSize","container","params","append","getMessageThread","username","get","sendMessage","content","invoke","recepientUsername","deleteMessage","id","delete","ɵfac","MessageService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,SAASA,oBAAT,QAAqC,oBAArC;AACA,SAASC,eAAT,QAAgC,MAAhC;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,QAAyD,oBAAzD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeR,WAAW,CAACS,MAA3B;AACA,SAAKC,MAAL,GAAcV,WAAW,CAACU,MAA1B;AACA,SAAKC,mBAAL,GAA2B,IAAIb,eAAJ,CAAoB,EAApB,CAA3B;AACA,SAAKc,cAAL,GAAsB,KAAKD,mBAAL,CAAyBE,YAAzB,EAAtB;AACH;;AACDC,EAAAA,mBAAmB,CAACC,IAAD,EAAOC,aAAP,EAAsB;AACrC,SAAKC,aAAL,GAAqB,IAAIpB,oBAAJ,GAChBqB,OADgB,CACR,KAAKR,MAAL,GAAc,eAAd,GAAgCM,aADxB,EACuC;AACxDG,MAAAA,kBAAkB,EAAE,MAAMJ,IAAI,CAACK;AADyB,KADvC,EAIhBC,sBAJgB,GAKhBC,KALgB,EAArB;AAMA,SAAKL,aAAL,CAAmBM,KAAnB,GAA2BC,KAA3B,CAAiCC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAA1C;AACA,SAAKR,aAAL,CAAmBW,EAAnB,CAAsB,sBAAtB,EAA8CC,QAAQ,IAAI;AACtD,WAAKlB,mBAAL,CAAyBmB,IAAzB,CAA8BD,QAA9B;AACH,KAFD;AAGA,SAAKZ,aAAL,CAAmBW,EAAnB,CAAsB,YAAtB,EAAoCG,OAAO,IAAI;AAC3C,WAAKnB,cAAL,CAAoBoB,IAApB,CAAyBjC,IAAI,CAAC,CAAD,CAA7B,EAAkCkC,SAAlC,CAA4CJ,QAAQ,IAAI;AACpD,aAAKlB,mBAAL,CAAyBmB,IAAzB,CAA8B,CAAC,GAAGD,QAAJ,EAAcE,OAAd,CAA9B;AACH,OAFD;AAGH,KAJD;AAKA,SAAKd,aAAL,CAAmBW,EAAnB,CAAsB,cAAtB,EAAsC,CAACM,KAAD,EAAQC,KAAR,KAAkB;AACpD,UAAID,KAAK,CAACE,WAAN,CAAkBC,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,EAA9B,CAAJ,EACI;AACP,KAHD;AAIH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKvB,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBwB,IAAnB;AACH;AACJ;;AACDC,EAAAA,WAAW,CAACC,UAAD,EAAaC,QAAb,EAAuBC,SAAvB,EAAkC;AACzC,QAAIC,MAAM,GAAG5C,oBAAoB,CAACyC,UAAD,EAAaC,QAAb,CAAjC;AACAE,IAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAc,WAAd,EAA2BF,SAA3B,CAAT;AACA,WAAO5C,kBAAkB,CAAC,KAAKO,OAAL,GAAe,UAAhB,EAA4BsC,MAA5B,EAAoC,KAAKvC,IAAzC,CAAzB;AACH;;AACDyC,EAAAA,gBAAgB,CAACC,QAAD,EAAW;AACvB,WAAO,KAAK1C,IAAL,CAAU2C,GAAV,CAAc,KAAK1C,OAAL,GAAe,kBAAf,GAAoCyC,QAAlD,CAAP;AACH;;AACKE,EAAAA,WAAW,CAACF,QAAD,EAAWG,OAAX,EAAoB;AAAA;;AAAA;AACjC,aAAO,KAAI,CAACnC,aAAL,CAAmBoC,MAAnB,CAA0B,aAA1B,EAAyC;AAAEC,QAAAA,iBAAiB,EAAEL,QAArB;AAA+BG,QAAAA;AAA/B,OAAzC,EACF5B,KADE,CACIC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADb,CAAP;AADiC;AAGpC;;AACD8B,EAAAA,aAAa,CAACC,EAAD,EAAK;AACd,WAAO,KAAKjD,IAAL,CAAUkD,MAAV,CAAiB,KAAKjD,OAAL,GAAe,WAAf,GAA6BgD,EAA9C,CAAP;AACH;;AAhDuB;;AAkD5BnD,cAAc,CAACqD,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAIvD,cAAV,EAA0BF,EAAE,CAAC0D,QAAH,CAAYzD,EAAE,CAAC0D,UAAf,CAA1B,CAAP;AAA+D,CAA1H;;AACAzD,cAAc,CAAC0D,KAAf,GAAuB,aAAc5D,EAAE,CAAC6D,kBAAH,CAAsB;AAAE5C,EAAAA,KAAK,EAAEf,cAAT;AAAyB4D,EAAAA,OAAO,EAAE5D,cAAc,CAACqD,IAAjD;AAAuDQ,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { getPaginatedResult, getPaginationHeaders } from './PaginationHelper';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class MessageService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.baseUrl = environment.apiUrl;\r\n        this.hubUrl = environment.hubUrl;\r\n        this.messageThreadSource = new BehaviorSubject([]);\r\n        this.messageThread$ = this.messageThreadSource.asObservable();\r\n    }\r\n    createHubConnection(user, otherUsername) {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(this.hubUrl + 'message?user=' + otherUsername, {\r\n            accessTokenFactory: () => user.token\r\n        })\r\n            .withAutomaticReconnect()\r\n            .build();\r\n        this.hubConnection.start().catch(error => console.log(error));\r\n        this.hubConnection.on('ReceiveMessageThread', messages => {\r\n            this.messageThreadSource.next(messages);\r\n        });\r\n        this.hubConnection.on('NewMessage', message => {\r\n            this.messageThread$.pipe(take(1)).subscribe(messages => {\r\n                this.messageThreadSource.next([...messages, message]);\r\n            });\r\n        });\r\n        this.hubConnection.on('UpdatedGroup', (group, Group) => {\r\n            if (group.connections.some(x => x.us))\r\n                ;\r\n        });\r\n    }\r\n    stopHubConnection() {\r\n        if (this.hubConnection) {\r\n            this.hubConnection.stop();\r\n        }\r\n    }\r\n    getMessages(pageNumber, pageSize, container) {\r\n        let params = getPaginationHeaders(pageNumber, pageSize);\r\n        params = params.append('container', container);\r\n        return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\r\n    }\r\n    getMessageThread(username) {\r\n        return this.http.get(this.baseUrl + 'messages/thread/' + username);\r\n    }\r\n    async sendMessage(username, content) {\r\n        return this.hubConnection.invoke('SendMessage', { recepientUsername: username, content })\r\n            .catch(error => console.log(error));\r\n    }\r\n    deleteMessage(id) {\r\n        return this.http.delete(this.baseUrl + 'messages/' + id);\r\n    }\r\n}\r\nMessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient)); };\r\nMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}